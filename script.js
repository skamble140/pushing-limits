document.addEventListener('DOMContentLoaded', () => {
    const runButton = document.getElementById('runButton');
    const userInput = document.getElementById('userInput');
    const outputElement = document.getElementById('output');
    const copyButton = document.getElementById('copyButton');

    // Placeholder for the streaming text
    let fullResponseText = '';

    runButton.addEventListener('click', async () => {
        const prompt = userInput.value;
        if (!prompt) {
            outputElement.innerHTML = '<span class="placeholder">Please enter a prompt.</span>';
            return;
        }

        // --- Backend Connection Simulation ---
        // This is where you'll eventually put your real fetch call.
        // For now, we simulate a response from a CrewAI agent.
        
        outputElement.innerHTML = ''; // Clear previous output
        runButton.disabled = true;
        runButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
        
        // This simulates a network delay
        await new Promise(resolve => setTimeout(resolve, 1000)); 
        
        const simulatedResponse = `
### Task Complete

Here is a summary of the findings based on your prompt: **"${prompt}"**.

*   **Analysis Point 1:** Detailed finding number one, derived from agent collaboration.
*   **Analysis Point 2:** Another insight generated by the crew.
*   **Analysis Point 3:** A final concluding remark.

\`\`\`python
# Example code block generated by the agent
def hello_crew():
    print("This is a demonstration of the advanced interface.")
\`\`\`
        `;
        
        // Render the response with a typing effect
        typewriterEffect(simulatedResponse);
    });
    
    function typewriterEffect(text) {
        fullResponseText = text;
        let i = 0;
        outputElement.innerHTML = ""; // Clear for typing
        
        const typingInterval = setInterval(() => {
            if (i < text.length) {
                // Render markdown live as it types
                outputElement.innerHTML = marked.parse(text.substring(0, i + 1));
                i++;
            } else {
                clearInterval(typingInterval);
                runButton.disabled = false;
                runButton.innerHTML = '<i class="fas fa-paper-plane"></i> Send';
            }
        }, 10); // Adjust speed of typing here (lower is faster)
    }

    copyButton.addEventListener('click', () => {
        if (fullResponseText) {
            navigator.clipboard.writeText(fullResponseText);
            copyButton.innerHTML = '<i class="fas fa-check"></i>';
            setTimeout(() => {
                copyButton.innerHTML = '<i class="far fa-copy"></i>';
            }, 2000);
        }
    });
});
